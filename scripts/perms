#!/usr/bin/env ruby

require 'optparse'

options = {}

# Setting up available options

opts = OptionParser.new
opts.banner = "#{opts.banner} [<target>]"
opts.separator ''
opts.separator <<SEP
Perms prints and sets the permitions of files and directores. If used alone
the permitions of the current directory is printed, when used with the -F
and/or -D options the permitions of files or directores are changed
accordingly. If <target> is a file only that file will be handled, if
<target> is a directory the contents of that directory will be handled and
the directory itself if -s is used. Options -f and -d can limit showing and
setting the permitions to only files or directories, the default behavior
is the same as using both options, both files and directories are handled.
SEP
opts.separator ''
opts.separator 'Options:'

opts.on('-f', '--files', 'Handles files.') do
	options[:use_files] = true
end

opts.on('-d', '--dirs', 'Handles directories.') do
	options[:use_dirs] = true
end

opts.on('-r', '--recursive', 'Enters recursively into subdirectories.') do
	options[:recursive] = true;
end

opts.on('-F', '--set-files MODE', OptionParser::OctalInteger, 'Sets MODE in all handled files.') do |mode|
	options[:mode_files] = mode
end

opts.on('-D', '--set-dirs MODE', 'Sets MODE in all handled directories.') do |mode|
	options[:mode_dirs] = mode
end

opts.on('-s', '--self', 'If the target is a directory, also handles it.') do
	options[:use_self] = true
end

opts.on('-a', '--all', 'Also handle hidden files and/or directories.') do
	options[:use_all] = true
end

opts.on('-v', '--verbose', 'When setting modes, see all unchanged entries.') do
	options[:verbose] = true
end

opts.separator ''

opts.on_tail('-h', '--help', 'Displays this help message and exits.') do
	options[:help] = true
end


# Parsing and handling help

begin
	opts.parse!
rescue OptionParser::ParseError
	warn $!.message
	warn 'use --help for more information'
	exit 1
end

if options[:help]
	puts opts.help
	exit
end

# No target means to use current directory
ARGV << '.' if ARGV.empty?

# No files or dirs options means both
if not options[:use_files] and not options[:use_dirs]
	options[:use_files] = true
	options[:use_dirs] = true
end

# Hash for errors encountered
errors = {}

# Array of all entries that will be handled
entries = []

# Each target passed is added to the entries
ARGV.each do |target|
	if not File.exists? target
		warn "'#{target}' no such file or directory"
		errors[:missing_target]
		next
	end
	
	# Do we have a file?
	if File.file? target and options[:use_files]
		entries << target
		next
	end
	
	# Not a file, we have a directory
	if options[:use_dirs]
		# Array to save all the dirs we need to go through
		# starting with the target itself
		dirs_to_check = ['.']
		
		if options[:recursive]
			glob_params = ['**/']
			glob_params << File::FNM_DOTMATCH if options[:use_all]
			Dir.chdir(target) do |path|
				# We keep al subdirs of the target
				dirs_to_check += Dir.glob(*glob_params)
			end
		end
		
		if options[:use_self]
			entries << target
		end
		
		glob_params = ['*']
		glob_params << File::FNM_DOTMATCH if options[:use_all]
		dirs_to_check.each do |subdir_target|
			# For each dir we keep the contents as entries
			Dir.chdir(target) do |path|
				Dir.chdir(subdir_target) do |path|
					dir_contents = Dir.glob(*glob_params)
					dir_contents.delete('.')
					dir_contents.delete('..')
					dir_path = [target, subdir_target]
					dir_path.delete('.')
					dir_contents.map! do |value|
						File.join(*dir_path, value)
					end
					entries += dir_contents
				end
			end
		end

	end # if

end # each

entries.each do |entry|
	stats = File.stat(entry)
	perms = sprintf('%o', stats.mode)
	perms = perms[-3, 3]
	
	puts "#{perms} #{entry}"
end

exit 0



	
	# is directory? is self?
# end

# ----------------

# If no target is given the files of the current dir are assumed
# by default it could show the permition and contents of .
# similar to lsi
# yes, ls, when used with folder it works with its contents,
# not the folder itself, if used with files it work with the
# files
# using perms -df is the same as using it without parameters
# when setting perms, print only changes, unless -v


puts "ARGV >> #{ARGV}"
puts "options >> #{options}"
puts RUBY_VERSION





exit




folders = Dir.glob('**/', File::FNM_DOTMATCH)

folders.each do |folder|
	stats = File.stat(folder)
	perms = sprintf('%o', stats.mode)
	perms = perms[-3, 3]

	puts "#{perms} #{folder}"
end

folders.each do |folder|
	files = Dir.glob(folder + '*', File::FNM_DOTMATCH)
	# puts "#{folder + '*'} globed #{files}"
	files.delete('.')
	files.delete('..')

	files.each do |file|
		# puts "#{file} is dir? #{File.directory?(file)}"
		next if File.directory?(file)
		
		stats = File.stat(file)
		perms = sprintf('%o', stats.mode)
		perms = perms[-3, 3]

		puts "#{perms} #{file}"
	end
end

